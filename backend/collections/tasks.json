{
	"info": {
		"_postman_id": "0236fbc3-a96b-4d0b-9676-84a84f8c98a5",
		"name": "BackendTests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "TASKS",
			"item": [
				{
					"name": "Get active tasks",
					"item": [
						{
							"name": "Get Active Task Positive",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"var schema = {",
											"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
											"    \"type\": \"array\",",
											"    \"items\": {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"            \"id\": {",
											"                \"type\": \"number\"",
											"            },",
											"            \"assigner\": {",
											"                \"type\": \"number\"",
											"            },",
											"            \"project_id\": {",
											"                \"type\": \"number\"",
											"            },",
											"            \"section_id\": {",
											"                \"type\": \"number\"",
											"            },",
											"            \"order\": {",
											"                \"type\": \"number\"",
											"            },",
											"            \"content\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"completed\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"label_ids\": {",
											"                \"type\": \"array\"",
											"            },",
											"            \"priority\": {",
											"                \"type\": \"number\"",
											"            },",
											"            \"comment_count\": {",
											"                \"type\": \"number\"",
											"            },",
											"            \"creator\": {",
											"                \"type\": \"number\"",
											"            },",
											"            \"created\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"url\": {",
											"                \"type\": \"string\"",
											"            }",
											"        },",
											"        \"required\": [\"id\", \"assigner\"]",
											"    }",
											"};",
											"",
											"pm.test(\"Response headers are correct\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    pm.response.to.have.header(\"Date\");",
											"    pm.response.to.have.header(\"Connection\");",
											"});",
											"",
											"pm.test('Schema is valid', function () {",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{api}}/tasks?project_id={{projectId}}",
									"host": [
										"{{api}}"
									],
									"path": [
										"tasks"
									],
									"query": [
										{
											"key": "project_id",
											"value": "{{projectId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Active Task Negative",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Bad request, projectId is mandatory\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([400]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{api}}/tasks?project_id=",
									"host": [
										"{{api}}"
									],
									"path": [
										"tasks"
									],
									"query": [
										{
											"key": "project_id",
											"value": ""
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get specific active task",
					"item": [
						{
							"name": "Get Specific Task Active",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var body;",
											"pm.environment.unset(\"idActiveTask\");",
											"pm.sendRequest({",
											"    url: pm.environment.get(\"api\") + \"/\" + 'tasks?project_id=' + pm.environment.get(\"projectId\"),",
											"    method: \"GET\",",
											"    header: {",
											"        \"Authorization\": 'Bearer ' + pm.environment.get(\"token\")",
											"    }",
											"}, function(err, response){",
											"    if (err) {",
											"        console.error('   ','######### Pre-request script has an error. #######');",
											"    }",
											"    body = response.json();",
											"    pm.environment.set(\"idActiveTask\", body[0].id);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"var schema = {",
											"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"id\": {",
											"            \"type\": \"number\"",
											"        },",
											"        \"assigner\": {",
											"            \"type\": \"number\"",
											"        },",
											"        \"project_id\": {",
											"            \"type\": \"number\"",
											"        },",
											"        \"section_id\": {",
											"            \"type\": \"number\"",
											"        },",
											"        \"order\": {",
											"            \"type\": \"number\"",
											"        },",
											"        \"content\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"completed\": {",
											"            \"type\": \"boolean\"",
											"        },",
											"        \"label_ids\": {",
											"            \"type\": \"array\"",
											"        },",
											"        \"priority\": {",
											"            \"type\": \"number\"",
											"        },",
											"        \"comment_count\": {",
											"            \"type\": \"number\"",
											"        },",
											"        \"creator\": {",
											"            \"type\": \"number\"",
											"        },",
											"        \"created\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"url\": {",
											"            \"type\": \"string\"",
											"        }",
											"    },",
											"    \"required\": [\"id\", \"assigner\", \"project_id\"]",
											"};",
											"",
											"pm.test(\"Response headers are correct\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    pm.response.to.have.header(\"Date\");",
											"    pm.response.to.have.header(\"Connection\");",
											"});",
											"",
											"pm.test('Schema is valid', function () {",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{api}}/tasks/{{idActiveTask}}",
									"host": [
										"{{api}}"
									],
									"path": [
										"tasks",
										"{{idActiveTask}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Specific Task Negative",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Id task it was not found\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([404]);",
											"});",
											"",
											"pm.test(\"Page not found\", function () {",
											"    pm.response.to.have.body(\"404 page not found\\n\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{api}}/tasks/BFGR",
									"host": [
										"{{api}}"
									],
									"path": [
										"tasks",
										"BFGR"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Create a new task",
					"item": [
						{
							"name": "Create New Task Positive",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var newTask = pm.variables.get(\"newName\");",
											"var jsonData = pm.response.json();",
											"var schema = {",
											"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"id\": {",
											"            \"type\": \"number\"",
											"        },",
											"        \"assigner\": {",
											"            \"type\": \"number\"",
											"        },",
											"        \"project_id\": {",
											"            \"type\": \"number\"",
											"        },",
											"        \"section_id\": {",
											"            \"type\": \"number\"",
											"        },",
											"        \"order\": {",
											"            \"type\": \"number\"",
											"        },",
											"        \"content\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"completed\": {",
											"            \"type\": \"boolean\"",
											"        },",
											"        \"label_ids\": {",
											"            \"type\": \"array\"",
											"        },",
											"        \"priority\": {",
											"            \"type\": \"number\"",
											"        },",
											"        \"comment_count\": {",
											"            \"type\": \"number\"",
											"        },",
											"        \"creator\": {",
											"            \"type\": \"number\"",
											"        },",
											"        \"created\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"url\": {",
											"            \"type\": \"string\"",
											"        }",
											"    },",
											"    \"required\": [\"id\", \"assigner\", \"project_id\"]",
											"};",
											"",
											"pm.test(\"Response headers are correct\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    pm.response.to.have.header(\"Date\");",
											"    pm.response.to.have.header(\"Connection\");",
											"});",
											"",
											"pm.test('Schema is valid', function () {",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
											"});",
											"",
											"pm.test (\"Content is correct\", function (){",
											"    pm.expect(jsonData.content).to.eql(newTask);",
											"});",
											"",
											"pm.environment.set(\"newIdTask\", jsonData.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"content\": \"{{newName}}\",\n    \"due_string\": \"tomorrow at 12:00\",\n    \"due_lang\": \"en\",\n    \"priority\": 1,\n    \"project_id\": {{projectId}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api}}/tasks",
									"host": [
										"{{api}}"
									],
									"path": [
										"tasks"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create New Task Negative",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Bad request content is empty\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([400]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"content\": \"\",\n    \"due_string\": \"tomorrow at 12:00\",\n    \"due_lang\": \"en\",\n    \"priority\": 1,\n    \"project_id\": 2261254215\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api}}/tasks",
									"host": [
										"{{api}}"
									],
									"path": [
										"tasks"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Update a task",
					"item": [
						{
							"name": "Update Task Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response headers are correct\", function () {",
											"    pm.response.to.have.header(\"Date\");",
											"    pm.response.to.have.header(\"Connection\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"content\": \"{{updateName}}\",\n    \"priority\": {{priority}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api}}/tasks/{{newIdTask}}",
									"host": [
										"{{api}}"
									],
									"path": [
										"tasks",
										"{{newIdTask}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Task Negative",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Bad request invalid ID task\", function () {",
											"    pm.response.to.have.body(\"Invalid id\\n\");",
											"});",
											"",
											"pm.test(\"Bad request code status 400\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([400]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"content\": \"no required\",\n    \"priority\": 4\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api}}/tasks/000000",
									"host": [
										"{{api}}"
									],
									"path": [
										"tasks",
										"000000"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Close a task",
					"item": [
						{
							"name": "Close Task Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response headers are correct\", function () {",
											"    pm.response.to.have.header(\"Date\");",
											"    pm.response.to.have.header(\"Connection\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{api}}/tasks/{{newIdTask}}/close",
									"host": [
										"{{api}}"
									],
									"path": [
										"tasks",
										"{{newIdTask}}",
										"close"
									]
								}
							},
							"response": []
						},
						{
							"name": "Close Task Negative",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Bad request invalid ID task\", function () {",
											"    pm.response.to.have.body(\"Invalid id\\n\");",
											"});",
											"",
											"pm.test(\"Bad request code status 400\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([400]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{api}}/tasks/00000/close",
									"host": [
										"{{api}}"
									],
									"path": [
										"tasks",
										"00000",
										"close"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Reopen a task",
					"item": [
						{
							"name": "Reopen Task Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response headers are correct\", function () {",
											"    pm.response.to.have.header(\"Date\");",
											"    pm.response.to.have.header(\"Connection\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{api}}/tasks/{{newIdTask}}/reopen",
									"host": [
										"{{api}}"
									],
									"path": [
										"tasks",
										"{{newIdTask}}",
										"reopen"
									]
								}
							},
							"response": []
						},
						{
							"name": "Reopen Task Negative",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Bad request invalid ID task\", function () {",
											"    pm.response.to.have.body(\"Invalid id\\n\");",
											"});",
											"",
											"pm.test(\"Bad request code status 400\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([400]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{api}}/tasks/00000/reopen",
									"host": [
										"{{api}}"
									],
									"path": [
										"tasks",
										"00000",
										"reopen"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete a task",
					"item": [
						{
							"name": "Delete Task Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response headers are correct\", function () {",
											"    pm.response.to.have.header(\"Date\");",
											"    pm.response.to.have.header(\"Connection\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{api}}/tasks/{{newIdTask}}",
									"host": [
										"{{api}}"
									],
									"path": [
										"tasks",
										"{{newIdTask}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Task Negative",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Bad request invalid ID task\", function () {",
											"    pm.response.to.have.body(\"Invalid id\\n\");",
											"});",
											"",
											"pm.test(\"Bad request code status 400\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([400]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{api}}/tasks/000000",
									"host": [
										"{{api}}"
									],
									"path": [
										"tasks",
										"000000"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"var random = Math.floor(Math.random() * 3);",
					"var body;",
					"",
					"pm.sendRequest({",
					"    url: pm.environment.get(\"api\") + \"/\" + 'projects',",
					"    method: \"GET\",",
					"    header: {",
					"        \"Authorization\": 'Bearer ' + pm.environment.get(\"token\")",
					"    }",
					"}, function(err, response){",
					"    random = random + 1;",
					"    body = response.json();",
					"    pm.environment.set(\"projectId\", body[random].id);",
					"});"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"const average = parseInt(pm.environment.get(\"averageResponseTime\"));",
					"",
					"",
					"pm.test(\"Status code is 2XX\", function () {",
					"    pm.response.to.be.success;",
					"});",
					"",
					"pm.test(\"Response time is into the average\", function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(average);",
					"});"
				]
			}
		}
	]
}